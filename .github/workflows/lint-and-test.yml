name: Lint and test

on:
  pull_request:
  push:
  workflow_call:
  workflow_dispatch:

jobs:
  lint-code:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/prepare-environment

      # Ensure dist/page-list.json has been created
      - name: Build site
        run: npm run build

      - name: Lint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

  lint-commit-messages:
    name: Lint commit messages
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up environment
        uses: ./.github/actions/prepare-environment

      - name: Lint commit messages
        run: |
          npm exec --no -- commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  test-unit:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/prepare-environment

      - name: Run unit tests
        run: npm run test

  build-container-image:
    name: Build container image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.event.repository.name }}
      CONTAINER_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/prepare-environment

      - name: Build container image
        run: podman build --tag $IMAGE_NAME --file Dockerfile

      - name: Export container image
        run: podman save $IMAGE_NAME > /tmp/container-image.tar

      - uses: actions/upload-artifact@v3
        with:
          name: container-image
          path: /tmp/container-image.tar
          retention-days: 1

  read-playwright-version:
    name: Read Playwright version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read-version.outputs.version }}
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - id: read-version
        name: Read Playwright version
        run: |
          echo "version=$(scripts/get-playwright-version.sh)" >> "$GITHUB_OUTPUT"

  test-e2e:
    name: Run e2e tests (${{ matrix.shard }}/${{ matrix.total_shards }})
    runs-on: ubuntu-latest
    needs:
      - read-playwright-version
      - build-container-image
    env:
      IMAGE_NAME: ${{ github.event.repository.name }}
      CONTAINER_NAME: ${{ github.event.repository.name }}
    container:
      image: mcr.microsoft.com/playwright:${{ needs.read-playwright-version.outputs.version }}-jammy
      options: --privileged
    strategy:
      matrix:
        shard: [1, 2]
        total_shards: [2]
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/prepare-environment

      - name: Install podman
        run: |
          apt-get update --yes
          apt-get install --yes podman

      - name: Download container image
        uses: actions/download-artifact@v3
        with:
          name: container-image
          path: /tmp

      - name: Import container image
        run: podman import /tmp/container-image.tar $IMAGE_NAME

      - name: Start container
        id: start-container
        run: |
          set -xe
          podman run --detach -p8080:8080 --name $CONTAINER_NAME $IMAGE_NAME

      - name: Run e2e tests
        run: npm run test:e2e -- --shard ${{ matrix.shard }}/${{ matrix.total_shards }}

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-${{ matrix.shard }}
          path: e2e/output

      - name: Stop container
        if: always() && steps.start-container.conclusion == 'success'
        run: docker stop $CONTAINER_NAME

  test-visual-regression:
    name: Run visual regression tests (${{ matrix.shard }}/${{ matrix.total_shards }})
    runs-on: ubuntu-latest
    needs:
      - read-playwright-version
    container:
      image: mcr.microsoft.com/playwright:${{ needs.read-playwright-version.outputs.version }}-jammy
      options: --user 1001
    strategy:
      matrix:
        shard: [1, 2]
        total_shards: [2]
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/prepare-environment

      - name: Build site
        run: npm run build

      - name: Run visual regression tests
        run: npm run test:visual:native -- --shard ${{ matrix.shard }}/${{ matrix.total_shards }}

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-regression-test-results-${{ matrix.shard }}
          path: e2e/output

  audit-dependencies:
    name: Audit dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/prepare-environment

      - name: Run audit
        run: npm audit
